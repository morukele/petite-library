{"version":3,"sources":["graphql/queries.js","graphql/mutations.js","components/AuthorForm.js","components/Authors.js","components/Books.js","components/LoginForm.js","components/NewBook.js","components/Notification.js","components/Recommended.js","App.js","index.js"],"names":["ALL_AUTHORS","gql","ALL_BOOKS","ME","ADD_BOOK","EDIT_AUTHOR","LOGIN","AuthorForm","setError","authors","useState","name","setName","year","setYear","useMutation","refetchQueries","query","changeBirthYear","result","useEffect","data","editAuthor","onSubmit","e","preventDefault","variables","setBornTo","value","onChange","target","map","a","key","type","parseInt","Authors","show","useQuery","loading","error","allAuthors","born","bookCount","Books","genre","setGenre","books","allBooks","genres","Set","b","flat","g","toLowerCase","filteredBooks","filter","includes","title","author","published","onClick","LoginForm","setToken","setPage","username","setUsername","password","setPassword","onError","graphQLErrors","message","login","token","localStorage","setItem","NewBook","setTitle","setAuthor","setPublished","setGenres","createPerson","submit","event","concat","join","Notification","errorMessage","style","color","Recommended","me","get","favoriteGenre","App","page","setErrorMessage","client","useApolloClient","getItem","notify","setTimeout","clear","clearStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"gyBAEO,IAAMA,EAAcC,YAAH,KAUXC,EAAYD,YAAH,KAcTE,EAAKF,YAAH,K,0yBCxBR,IAAMG,EAAWH,YAAH,KAqBRI,EAAcJ,YAAH,KASXK,EAAQL,YAAH,KCqBHM,EAhDI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAAc,EACpBC,mBAASD,EAAQ,GAAGE,MADA,mBACrCA,EADqC,KAC/BC,EAD+B,OAEpBF,mBAAS,IAFW,mBAErCG,EAFqC,KAE/BC,EAF+B,OAIVC,YAAYV,EAAa,CACzDW,eAAgB,CAAC,CAAEC,MAAOjB,MALgB,mBAIrCkB,EAJqC,KAIpBC,EAJoB,KAsB5C,OANAC,qBAAU,WACJD,EAAOE,MAAmC,OAA3BF,EAAOE,KAAKC,YAC7Bd,EAAS,sBAEV,CAACW,EAAOE,KAAMb,IAGf,6BACE,8CACA,0BAAMe,SAjBK,SAACC,GACdA,EAAEC,iBAEFP,EAAgB,CAAEQ,UAAW,CAAEf,OAAMgB,UAAWd,KAEhDC,EAAQ,MAaJ,qCACQ,IACN,4BAAQc,MAAOjB,EAAMkB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBlB,EAAQkB,EAAOF,SAC3DnB,EAAQsB,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAErB,MAAOqB,EAAErB,WAI9B,2CACc,IACZ,2BACEuB,KAAK,SACLN,MAAOf,EACPgB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBhB,EAAQqB,SAASL,EAAOF,YAGtD,4BAAQM,KAAK,UAAb,oBCDOE,EAzCC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAM7B,EAAe,EAAfA,SAAe,EACL8B,YAAStC,GAAlCuC,EAD8B,EAC9BA,QAASC,EADqB,EACrBA,MAAOnB,EADc,EACdA,KAExB,IAAKgB,EACH,OAAO,KAGT,GAAIE,EACF,OAAO,2CAGT,GAAIC,EACF,OAAO,6BAAMA,GAGf,IAAM/B,EAAUY,EAAKoB,WAErB,OACE,6BACE,uCACA,+BACE,+BACE,4BACE,sCACA,oCACA,sCAEDhC,EAAQsB,KAAI,SAACC,GAAD,OACX,wBAAIC,IAAKD,EAAErB,MACT,4BAAKqB,EAAErB,MACP,4BAAKqB,EAAEU,MACP,4BAAKV,EAAEW,iBAKf,kBAAC,EAAD,CAAYnC,SAAUA,EAAUC,QAASA,M,QCyDhCmC,EA9FD,SAAC,GAAc,IAAZP,EAAW,EAAXA,KAAW,EACOC,YAASpC,GAAlCqC,EADkB,EAClBA,QAASC,EADS,EACTA,MAAOnB,EADE,EACFA,KADE,EAEAX,mBAAS,IAFT,mBAEnBmC,EAFmB,KAEZC,EAFY,KAI1B,IAAKT,EACH,OAAO,KAGT,GAAIE,EACF,OAAO,2CAGT,GAAIC,EACF,OAAO,6BAAMA,GAGf,IAAMO,EAAQ1B,EAAK2B,SAEbC,EAAM,YACP,IAAIC,IACLH,EACGhB,KAAI,SAACoB,GAAD,OAAOA,EAAEF,UACbG,OACArB,KAAI,SAACsB,GAAD,OAAOA,EAAEC,mBAuDpB,OACE,6BACE,qCAECT,EAAQ,mBAvDS,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACjBU,EAAgBR,EAAMS,QAAO,SAACL,GAAD,OACjCA,EAAEF,OAAOlB,KAAI,SAACsB,GAAD,OAAOA,EAAEC,iBAAeG,SAASZ,MAGhD,OACE,6BACE,wCAAcA,GACd,+BACE,+BACE,4BACE,qCACA,sCACA,0CAEDU,EAAcxB,KAAI,SAACoB,GAAD,OACjB,wBAAIlB,IAAKkB,EAAEO,OACT,4BAAKP,EAAEO,OACP,4BAAKP,EAAEQ,OAAOhD,MACd,4BAAKwC,EAAES,oBAoCR,CAAef,MAAOA,IAAY,mBA3B9B,WACf,OACE,6BACE,+BACE,+BACE,4BACE,qCACA,sCACA,0CAEDE,EAAMhB,KAAI,SAACoB,GAAD,OACT,wBAAIlB,IAAKkB,EAAEO,OACT,4BAAKP,EAAEO,OACP,4BAAKP,EAAEQ,OAAOhD,MACd,4BAAKwC,EAAES,oBAa0B,MAE1CX,EAAOlB,KAAI,SAACsB,GAAD,OACV,4BAAQpB,IAAKoB,EAAGQ,QAAS,kBAAMf,EAASO,KACrCA,MAGL,4BAAQQ,QAAS,kBAAMf,EAAS,MAAhC,gBChCSgB,EAzDG,SAAC,GAA2C,IAAzCzB,EAAwC,EAAxCA,KAAM7B,EAAkC,EAAlCA,SAAUuD,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAAc,EAC3BtD,mBAAS,IADkB,mBACpDuD,EADoD,KAC1CC,EAD0C,OAE3BxD,mBAAS,IAFkB,mBAEpDyD,EAFoD,KAE1CC,EAF0C,OAInCrD,YAAYT,EAAO,CACzC+D,QAAS,SAAC7B,GACRhC,EAASgC,EAAM8B,cAAc,GAAGC,YANuB,mBAIpDC,EAJoD,KAI7CrD,EAJ6C,KAU3DC,qBAAU,WACR,GAAID,EAAOE,KAAM,CACf,IAAMoD,EAAQtD,EAAOE,KAAKmD,MAAM5C,MAChCmC,EAASU,GACTC,aAAaC,QAAQ,qBAAsBF,MAE5C,CAACtD,EAAOE,KAAM0C,IAYjB,OAAK1B,EAKH,6BACE,0BAAMd,SAhBK,SAACC,GACdA,EAAEC,iBAEF+C,EAAM,CAAE9C,UAAW,CAAEuC,WAAUE,cAC/BH,EAAQ,SAERE,EAAY,IACZE,EAAY,MAUR,sCACA,yCACY,IACV,2BACExC,MAAOqC,EACPpC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBoC,EAAYpC,EAAOF,WAGjD,yCACY,IACV,2BACEM,KAAK,WACLN,MAAOuC,EACPtC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBsC,EAAYtC,EAAOF,WAGjD,4BAAQM,KAAK,UAAb,YAtBG,M,yBCqDI0C,EAjFC,SAAC,GAAwB,IAAtBvC,EAAqB,EAArBA,KAAM7B,EAAe,EAAfA,SAAe,EACZE,mBAAS,IADG,mBAC/BgD,EAD+B,KACxBmB,EADwB,OAEVnE,mBAAS,IAFC,mBAE/BiD,EAF+B,KAEvBmB,EAFuB,OAGJpE,mBAAS,IAHL,mBAG/BkD,EAH+B,KAGpBmB,EAHoB,OAIZrE,mBAAS,IAJG,mBAI/BmC,EAJ+B,KAIxBC,EAJwB,OAKVpC,mBAAS,IALC,mBAK/BuC,EAL+B,KAKvB+B,EALuB,OAOfjE,YAAYX,EAAU,CAC3CY,eAAgB,CAAC,CAAEC,MAAOf,GAAa,CAAEe,MAAOjB,IAChDqE,QAAS,SAAC7B,GACRhC,EAASgC,EAAM8B,cAAc,GAAGC,YAH7BU,EAP+B,oBActC,IAAK5C,EACH,OAAO,KAGT,IAAM6C,EAAM,uCAAG,WAAOC,GAAP,SAAAnD,EAAA,yDACbmD,EAAM1D,iBAEDiC,GAAUE,EAHF,uBAIXpD,EAAS,2BAJE,0BAQbyE,EAAa,CAAEvD,UAAW,CAAEgC,QAAOC,SAAQC,YAAWX,YAEtD4B,EAAS,IACTE,EAAa,IACbD,EAAU,IACVE,EAAU,IACVlC,EAAS,IAdI,4CAAH,sDAsBZ,OACE,6BACE,0BAAMvB,SAAU2D,GACd,qCAEE,2BACEtD,MAAO8B,EACP7B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB+C,EAAS/C,EAAOF,WAG9C,sCAEE,2BACEA,MAAO+B,EACP9B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBgD,EAAUhD,EAAOF,WAG/C,yCAEE,2BACEM,KAAK,SACLN,MAAOgC,EACP/B,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBiD,EAAa5C,SAASL,EAAOF,YAG3D,6BACE,2BACEA,MAAOiB,EACPhB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBgB,EAAShB,EAAOF,UAE5C,4BAAQiC,QAnCC,WACfmB,EAAU/B,EAAOmC,OAAOvC,IACxBC,EAAS,KAiCwBZ,KAAK,UAAhC,cAIF,wCAAce,EAAOoC,KAAK,MAC1B,4BAAQnD,KAAK,UAAb,kBCtEOoD,EARM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtB,OAAKA,EAIE,yBAAKC,MAAO,CAAEC,MAAO,QAAUF,GAH7B,M,QCkDIG,EAjDK,SAAC,GAAc,IAAZrD,EAAW,EAAXA,KACflB,EAASmB,YAASpC,GADQ,EAECoC,YAASnC,GAAlCoC,EAFwB,EAExBA,QAASC,EAFe,EAEfA,MAAOnB,EAFQ,EAERA,KAElBsE,EAAKC,cAAIvE,EAAM,MAErB,IAAKgB,EACH,OAAO,KAGT,GAAIE,EACF,OAAO,2CAGT,GAAIC,EACF,OAAO,6BAAMA,GAGf,IAAMe,EAAgBpC,EAAOE,KAAK2B,SAASQ,QAAO,SAACL,GAAD,OAChDA,EAAEF,OAAOlB,KAAI,SAACsB,GAAD,OAAOA,EAAEC,iBAAeG,SAASkC,EAAGE,kBAGnD,OACE,6BACE,+CACA,2BACGF,EAAG1B,SADN,2CACwD,IACtD,2BAAI0B,EAAGE,eAAmB,KAE5B,+BACE,+BACE,4BACE,6BACA,sCACA,0CAEDtC,EAAcxB,KAAI,SAACoB,GAAD,OACjB,wBAAIlB,IAAKkB,EAAEO,OACT,4BAAKP,EAAEO,OACP,4BAAKP,EAAEQ,OAAOhD,MACd,4BAAKwC,EAAES,mBCyBNkC,EA7DH,WAAO,IAAD,EACQpF,mBAAS,WADjB,mBACTqF,EADS,KACH/B,EADG,OAEwBtD,mBAAS,MAFjC,mBAET6E,EAFS,KAEKS,EAFL,OAGUtF,mBAAS,MAHnB,mBAGT+D,EAHS,KAGFV,EAHE,KAKVkC,EAASC,cAEf9E,qBAAU,WACHqD,GACHV,EAASW,aAAayB,QAAQ,yBAE/B,CAAC1B,IAEJ,IAAM2B,EAAS,SAAC7B,GACdyB,EAAgBzB,GAChB8B,YAAW,WACTL,EAAgB,QACf,MAUL,OACE,6BACE,6BACE,4DACA,4BAAQnC,QAAS,kBAAMG,EAAQ,aAA/B,WACA,4BAAQH,QAAS,kBAAMG,EAAQ,WAA/B,SACCS,EACC,4BAAQZ,QAAS,kBAAMG,EAAQ,SAA/B,YAEA,4BAAQH,QAAS,kBAAMG,EAAQ,WAA/B,SAEDS,EACC,4BAAQZ,QAAS,kBAAMG,EAAQ,iBAA/B,eACE,KACHS,EAAQ,4BAAQZ,QAAS,kBApB9Ba,aAAa4B,QACbvC,EAAS,MACTkC,EAAOM,kBACPvC,EAAQ,WAiBK,WAAoD,MAE/D,kBAAC,EAAD,CAAcuB,aAAcA,IAC5B,kBAAC,EAAD,CAASlD,KAAe,YAAT0D,EAAoBvF,SAAU4F,IAC7C,kBAAC,EAAD,CAAO/D,KAAe,UAAT0D,IACb,kBAAC,EAAD,CAAS1D,KAAe,QAAT0D,EAAgBvF,SAAU4F,IACzC,kBAAC,EAAD,CACE/D,KAAe,UAAT0D,EACNvF,SAAU4F,EACVrC,SAAUA,EACVC,QAASA,IAEVS,EACC,kBAAC,EAAD,CAAapC,KAAe,gBAAT0D,EAAwBvF,SAAU4F,IACnD,KA3BN,M,wCCzBEI,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BlC,EAAQC,aAAayB,QAAQ,sBACnC,MAAO,CACLQ,QAAQ,eACHA,EADE,CAELC,cAAenC,EAAK,iBAAaA,GAAU,WAK3CoC,EAAW,IAAIC,IAAS,CAAEC,IAAK,0BAE/Bd,EAAS,IAAIe,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAMX,EAASpB,OAAOyB,KAGxBO,IAASC,OACP,kBAACC,EAAA,EAAD,CAAgBrB,OAAQA,GACtB,kBAAC,EAAD,OAEFsB,SAASC,eAAe,W","file":"static/js/main.3c0eccf0.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_AUTHORS = gql`\r\n  {\r\n    allAuthors {\r\n      name\r\n      born\r\n      bookCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_BOOKS = gql`\r\n  query allBooks($author: String, $genre: String) {\r\n    allBooks(author: $author, genre: $genre) {\r\n      title\r\n      published\r\n      author {\r\n        name\r\n        born\r\n      }\r\n      genres\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ME = gql`\r\n  query me {\r\n    me {\r\n      username\r\n      favoriteGenre\r\n    }\r\n  }\r\n`;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ADD_BOOK = gql`\r\n  mutation AddBook(\r\n    $title: String!\r\n    $author: String!\r\n    $published: Int!\r\n    $genres: [String!]!\r\n  ) {\r\n    addBook(\r\n      title: $title\r\n      author: $author\r\n      published: $published\r\n      genres: $genres\r\n    ) {\r\n      title\r\n      author\r\n      genres\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EDIT_AUTHOR = gql`\r\n  mutation editAuthor($name: String!, $setBornTo: Int!) {\r\n    editAuthor(name: $name, setBornTo: $setBornTo) {\r\n      name\r\n      born\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      value\r\n    }\r\n  }\r\n`;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { EDIT_AUTHOR } from \"../graphql/mutations\";\r\nimport { ALL_AUTHORS } from \"../graphql/queries\";\r\n\r\nconst AuthorForm = ({ setError, authors }) => {\r\n  const [name, setName] = useState(authors[0].name);\r\n  const [year, setYear] = useState(\"\");\r\n\r\n  const [changeBirthYear, result] = useMutation(EDIT_AUTHOR, {\r\n    refetchQueries: [{ query: ALL_AUTHORS }],\r\n  });\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n\r\n    changeBirthYear({ variables: { name, setBornTo: year } });\r\n\r\n    setYear(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (result.data && result.data.editAuthor === null) {\r\n      setError(\"Author not found\");\r\n    }\r\n  }, [result.data, setError]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Set Birth Year</h2>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          Name:{\" \"}\r\n          <select value={name} onChange={({ target }) => setName(target.value)}>\r\n            {authors.map((a) => (\r\n              <option key={a.name}>{a.name}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          Birth Year:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            value={year}\r\n            onChange={({ target }) => setYear(parseInt(target.value))}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Update Author</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthorForm;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ALL_AUTHORS } from \"../graphql/queries\";\r\nimport AuthorForm from \"./AuthorForm\";\r\n\r\nconst Authors = ({ show, setError }) => {\r\n  const { loading, error, data } = useQuery(ALL_AUTHORS);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const authors = data.allAuthors;\r\n\r\n  return (\r\n    <div>\r\n      <h2>authors</h2>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>author</th>\r\n            <th>born</th>\r\n            <th>books</th>\r\n          </tr>\r\n          {authors.map((a) => (\r\n            <tr key={a.name}>\r\n              <td>{a.name}</td>\r\n              <td>{a.born}</td>\r\n              <td>{a.bookCount}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <AuthorForm setError={setError} authors={authors} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Authors;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { ALL_BOOKS } from \"../graphql/queries\";\r\n\r\nconst Books = ({ show }) => {\r\n  const { loading, error, data } = useQuery(ALL_BOOKS);\r\n  const [genre, setGenre] = useState(\"\");\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const books = data.allBooks;\r\n\r\n  const genres = [\r\n    ...new Set(\r\n      books\r\n        .map((b) => b.genres)\r\n        .flat()\r\n        .map((g) => g.toLowerCase())\r\n    ),\r\n  ];\r\n\r\n  const FilteredBooks = ({ genre }) => {\r\n    const filteredBooks = books.filter((b) =>\r\n      b.genres.map((g) => g.toLowerCase()).includes(genre)\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h3>In genre {genre}</h3>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>title</th>\r\n              <th>author</th>\r\n              <th>published</th>\r\n            </tr>\r\n            {filteredBooks.map((b) => (\r\n              <tr key={b.title}>\r\n                <td>{b.title}</td>\r\n                <td>{b.author.name}</td>\r\n                <td>{b.published}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const AllBooks = () => {\r\n    return (\r\n      <div>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>title</th>\r\n              <th>author</th>\r\n              <th>published</th>\r\n            </tr>\r\n            {books.map((b) => (\r\n              <tr key={b.title}>\r\n                <td>{b.title}</td>\r\n                <td>{b.author.name}</td>\r\n                <td>{b.published}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>books</h2>\r\n\r\n      {genre ? <FilteredBooks genre={genre} /> : <AllBooks />}\r\n\r\n      {genres.map((g) => (\r\n        <button key={g} onClick={() => setGenre(g)}>\r\n          {g}\r\n        </button>\r\n      ))}\r\n      <button onClick={() => setGenre(\"\")}>all genres</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Books;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { LOGIN } from \"../graphql/mutations\";\r\n\r\nconst LoginForm = ({ show, setError, setToken, setPage }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [login, result] = useMutation(LOGIN, {\r\n    onError: (error) => {\r\n      setError(error.graphQLErrors[0].message);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (result.data) {\r\n      const token = result.data.login.value;\r\n      setToken(token);\r\n      localStorage.setItem(\"library-user-token\", token);\r\n    }\r\n  }, [result.data, setToken]);\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n\r\n    login({ variables: { username, password } });\r\n    setPage(\"books\");\r\n\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={submit}>\r\n        <h1>Log in</h1>\r\n        <div>\r\n          username:{\" \"}\r\n          <input\r\n            value={username}\r\n            onChange={({ target }) => setUsername(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          password:{\" \"}\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={({ target }) => setPassword(target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Log in</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { ADD_BOOK } from \"../graphql/mutations\";\r\nimport { ALL_AUTHORS, ALL_BOOKS } from \"../graphql/queries\";\r\n\r\nconst NewBook = ({ show, setError }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const [published, setPublished] = useState(\"\");\r\n  const [genre, setGenre] = useState(\"\");\r\n  const [genres, setGenres] = useState([]);\r\n\r\n  const [createPerson] = useMutation(ADD_BOOK, {\r\n    refetchQueries: [{ query: ALL_BOOKS }, { query: ALL_AUTHORS }],\r\n    onError: (error) => {\r\n      setError(error.graphQLErrors[0].message);\r\n    },\r\n  });\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  const submit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!title || !published) {\r\n      setError(\"All Fields are required\");\r\n      return;\r\n    }\r\n\r\n    createPerson({ variables: { title, author, published, genres } });\r\n\r\n    setTitle(\"\");\r\n    setPublished(\"\");\r\n    setAuthor(\"\");\r\n    setGenres([]);\r\n    setGenre(\"\");\r\n  };\r\n\r\n  const addGenre = () => {\r\n    setGenres(genres.concat(genre));\r\n    setGenre(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={submit}>\r\n        <div>\r\n          title\r\n          <input\r\n            value={title}\r\n            onChange={({ target }) => setTitle(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          author\r\n          <input\r\n            value={author}\r\n            onChange={({ target }) => setAuthor(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          published\r\n          <input\r\n            type=\"number\"\r\n            value={published}\r\n            onChange={({ target }) => setPublished(parseInt(target.value))}\r\n          />\r\n        </div>\r\n        <div>\r\n          <input\r\n            value={genre}\r\n            onChange={({ target }) => setGenre(target.value)}\r\n          />\r\n          <button onClick={addGenre} type=\"button\">\r\n            add genre\r\n          </button>\r\n        </div>\r\n        <div>genres: {genres.join(\" \")}</div>\r\n        <button type=\"submit\">create book</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewBook;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ errorMessage }) => {\r\n  if (!errorMessage) {\r\n    return null;\r\n  }\r\n\r\n  return <div style={{ color: \"red\" }}>{errorMessage}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ALL_BOOKS, ME } from \"../graphql/queries\";\r\nimport { get } from \"lodash\";\r\n\r\nconst Recommended = ({ show }) => {\r\n  const result = useQuery(ALL_BOOKS);\r\n  const { loading, error, data } = useQuery(ME);\r\n\r\n  const me = get(data, \"me\");\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const filteredBooks = result.data.allBooks.filter((b) =>\r\n    b.genres.map((g) => g.toLowerCase()).includes(me.favoriteGenre)\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Recommendations</h1>\r\n      <p>\r\n        {me.username} these books are in your favorite genre:{\" \"}\r\n        <b>{me.favoriteGenre}</b>{\" \"}\r\n      </p>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>author</th>\r\n            <th>published</th>\r\n          </tr>\r\n          {filteredBooks.map((b) => (\r\n            <tr key={b.title}>\r\n              <td>{b.title}</td>\r\n              <td>{b.author.name}</td>\r\n              <td>{b.published}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommended;\r\n","import { useApolloClient } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Authors from \"./components/Authors\";\r\nimport Books from \"./components/Books\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport NewBook from \"./components/NewBook\";\r\nimport Notification from \"./components/Notification\";\r\nimport Recommended from \"./components/Recommended\";\r\n\r\nconst App = () => {\r\n  const [page, setPage] = useState(\"authors\");\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n\r\n  const client = useApolloClient();\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      setToken(localStorage.getItem(\"library-user-token\"));\r\n    }\r\n  }, [token]);\r\n\r\n  const notify = (message) => {\r\n    setErrorMessage(message);\r\n    setTimeout(() => {\r\n      setErrorMessage(null);\r\n    }, 10000);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.clear();\r\n    setToken(null);\r\n    client.clearStore();\r\n    setPage(\"login\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Why is this not working well</h1>\r\n        <button onClick={() => setPage(\"authors\")}>authors</button>\r\n        <button onClick={() => setPage(\"books\")}>books</button>\r\n        {token ? (\r\n          <button onClick={() => setPage(\"add\")}>add book</button>\r\n        ) : (\r\n          <button onClick={() => setPage(\"login\")}>login</button>\r\n        )}\r\n        {token ? (\r\n          <button onClick={() => setPage(\"recommended\")}>recommended</button>\r\n        ) : null}\r\n        {token ? <button onClick={() => logout()}>log out</button> : null}\r\n      </div>\r\n      <Notification errorMessage={errorMessage} />\r\n      <Authors show={page === \"authors\"} setError={notify} />\r\n      <Books show={page === \"books\"} />\r\n      <NewBook show={page === \"add\"} setError={notify} />\r\n      <LoginForm\r\n        show={page === \"login\"}\r\n        setError={notify}\r\n        setToken={setToken}\r\n        setPage={setPage}\r\n      />\r\n      {token ? (\r\n        <Recommended show={page === \"recommended\"} setError={notify} />\r\n      ) : null}\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport {\r\n  HttpLink,\r\n  InMemoryCache,\r\n  ApolloClient,\r\n  ApolloProvider,\r\n} from \"@apollo/client\";\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem(\"library-user-token\");\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `bearer ${token}` : null,\r\n    },\r\n  };\r\n});\r\n\r\nconst httpLink = new HttpLink({ uri: \"http://localhost:4000\" });\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: authLink.concat(httpLink),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}